// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  accounts        Account[]
  sessions        Session[]
  key             String    @default("")
  personality     String    @default("")
  tweetId         String?   @db.ObjectId
  tweets          Tweet[]   @relation("UserTweets")
  follower        User[]    @relation("UserFollows", fields: [followerIDs], references: [id])
  followerIDs     String[]  @db.ObjectId
  following       User[]    @relation("UserFollows", fields: [followingIDs], references: [id])
  followingIDs    String[]  @db.ObjectId
  likedTweetIDs   String[]  @db.ObjectId
  likedTweets     Tweet[]   @relation("LikedTweets", fields: [likedTweetIDs], references: [id])
  retweetIDs      String[]  @db.ObjectId
  retweetedTweets Tweet[]   @relation("RetweetedTweets", fields: [retweetIDs], references: [id])
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tweet {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  tweet            String
  likes            Int      @default(0)
  retweets         Int      @default(0)
  commentCount     Int      @default(0)
  userId           String   @db.ObjectId
  user             User     @relation("UserTweets", fields: [userId], references: [id], onDelete: Cascade)
  commentId        String?  @db.ObjectId
  comment          Tweet?   @relation("TweetComments", fields: [commentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  comments         Tweet[]  @relation("TweetComments")
  date             DateTime @default(now())
  likedUserIDs     String[] @db.ObjectId
  likedBy          User[]   @relation("LikedTweets", fields: [likedUserIDs], references: [id])
  retweetedUserIDs String[] @db.ObjectId
  retweetedBy      User[]   @relation("RetweetedTweets", fields: [retweetedUserIDs], references: [id])
}
